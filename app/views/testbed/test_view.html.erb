<div class="ux-testbed-container ux-testbed-container-<%= @view_name %>">
</div>

<%= content_for :javascript do -%>
  <%= javascript_tag do %>

data = {
  topics: [
    { "id": 1,
      "name": "Conversations",
      "unread_conversations": 3
    },
    { "id": 4,
      "name": "Structural",
      "unread_conversations": 0
    },
    { "id": 6,
      "name": "Chit Chat",
      "unread_conversations": 0
    },
    { "id": 2,
      "name": "Water Cooler Dev",
      "unread_conversations": 2
    },
    { "id": 9,
      "name": "Testing stuff",
      "unread_conversations": 0
    }
  ],
  conversations: [
    { "id": 3,
      "title": "Talk about stuff",
      "most_recent_message": 1734512345,
      "most_recent_viewed": 1722345134,
      "participants": [
        { "id": 2,
          "name": "Paul Revere",
          "last_updated_time": 1235123423,
        },
        { "id": 4,
          "name": "Thomas Paine",
          "last_updated_time": 1613423423,
        }
      ]
    },
    { "id": 2,
      "title": "Meeting Notes",
      "most_recent_message": 1734512325,
      "most_recent_viewed": 1742345134,
      "participants": [
        { "id": 7,
          "name": "Ethan Allen",
          "last_updated_time": 1235123123,
        },
        { "id": 4,
          "name": "Thomas Paine",
          "last_updated_time": 1613423423,
        }
      ]
    },
    { "id": 5,
      "title": "What's for lunch?",
      "most_recent_message": 1734512545,
      "most_recent_viewed": 1722345934,
      "participants": [
        { "id": 1,
          "name": "George Washington",
          "last_updated_time": 1235123523,
        },
        { "id": 123,
          "name": "George Washington Carver",
          "last_updated_time": 1235123523,
        },
        { "id": 13213,
          "name": "George Foreman",
          "last_updated_time": 1235123523,
        },
        { "id": 13212323,
          "name": "Alexander Hamilton",
          "last_updated_time": 1235123523,
        },
        { "id": 15,
          "name": "John Adams",
          "last_updated_time": 1613423923,
        }
      ]
    }
  ],
  actions: [
    { type: "message",
      user: {
        name: "Ethan Allen",
        id: 2
      },
      timestamp: 1363802638003,
      id: 123,
      text: "This is a message"
    },
    { type: "message",
      user: {
        name: "Bonerz MaGee",
        id: 3
      },
      timestamp: 1363802638004,
      id: 124,
      text: "Yo Dawg, that was a message!"
    },
    { type: "update_users",
      user: {
        name: "Ethan Allen",
        id: 2
      },
      timestamp: 1363802638003,
      id: 456,
      added: [
        { name: "George Washington",
          id: 1
        },
        { name: "Benjamin Franklin",
          id: 5
        }
      ],
      removed: [
        { name: "John Adams",
          id: 4
        }
      ]
    },
    { type: "retitle",
      user: {
        name: "Ethan Allen",
        id: 2
      },
      id: 878,
      timestamp: 1363802638003,
      title: "Conversation Title"
    },
    { type: "deletion",
      user: {
        name: "Ethan Allen",
        id: 2
      },
      id: 788,
      timestamp: 1363802638003,
      action_id: 123
    }
  ],
  participants: [
    { name: "Sharon Jones",
      id: 1
    },
    { name: "The Dap Kings",
      id: 2
    }
  ],
  user: {
    "email": "george.washington@usa.gov",
    "full_name": "George Washington",
    "id": 1,
    "address_book": [
      { "name": "Paul Revere",
        "id": 2
      },
      { "name": "Ethan Allen",
        "id": 4
      },
      { "name": "Benjamin Franklin",
        "id": 6
      }
    ]
  }
}

var name = '<%= @view_name %>';
var view;
switch(name) {
  case 'conversation':
    var model = new Structural.Models.Conversation(data.conversations[0]);
    view = new Structural.Views.Conversation({model: model});
    break;
  case 'conversation-list':
    var collection = new Structural.Collections.Conversations(data.conversations);
    view = new Structural.Views.Conversations({collection: collection});
    break;
  case 'conversation-container':
    var collection = new Structural.Collections.Conversations(data.conversations);
    view = new Structural.Views.ConversationContainer({conversations: collection});
    break;
  case 'topic':
    var model = new Structural.Models.Topic(data.topics[0]);
    view = new Structural.Views.Topic({model: model});
    break;
  case 'topic-list':
    var collection = new Structural.Collections.Topics(data.topics);
    view = new Structural.Views.Topics({collection: collection});
    break;
  case 'topic-container':
    var collection = new Structural.Collections.Topics(data.topics);
    view = new Structural.Views.TopicContainer({topics: collection});
    break;
  case 'title-editor':
    var model = new Structural.Models.Conversation(data.conversations[0]);
    view = new Structural.Views.TitleEditor({conversation: model});
    break;
  case 'participant-editor':
    var collection = new Structural.Collections.Participants(data.participants);
    var addresses = new Structural.Collections.Participants(data.user.address_book);
    view = new Structural.Views.ParticipantEditor({
      participants: collection,
      addressBook: addresses
    });
    break;
  case 'action':
    var model = new Structural.Models.Action(data.actions[0]);
    view = new Structural.Views.Action({model: model});
    break;
  case 'action-list':
    var collection = new Structural.Collections.Actions(data.actions);
    view = new Structural.Views.Actions({collection: collection});
    break;
  case 'compose':
    var model = new Structural.Models.Conversation(data.conversations[0]);
    view = new Structural.Views.Compose({conversation: model});
    break;
  case 'action-container':
    var actions = new Structural.Collections.Actions(data.actions);
    var participants = new Structural.Collections.Participants(data.participants);
    var conversation = new Structural.Models.Conversation(data.conversations[0]);
    var addresses = new Structural.Collections.Participants(data.user.address_book);
    view = new Structural.Views.ActionContainer({
      actions: actions,
      participants: participants,
      conversation: conversation,
      addresses: addresses
    });
    break;
  case 'structural-bar':
    var model = new Structural.Models.User(data.user);
    view = new Structural.Views.StructuralBar({model: model});
    break;
  case 'the-whole-app':
    $('.ux-testbed-container').detach();
    var bootstrap = _.clone(data);
    bootstrap.conversation = bootstrap.conversations[0];
    Structural.start(bootstrap);
    break;
  default:
    console.log('Unknown view name!!');
    break;
}

if (name != 'the-whole-app') {
  view.render();
  $('.ux-testbed-container').html(view.el);
}

  <% end %>
<% end %>
