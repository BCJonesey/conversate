<div class="ux-testbed-container ux-testbed-container-<%= @view_name %>">
</div>

<%= content_for :javascript do -%>

data = {
  folders: [
    { "id": 1,
      "name": "Conversations",
      "unread_conversations": 3,
      "users": [
        { "id": 2,
          "name": "Paul Revere",
          "last_updated_time": 1235123423,
        },
        { "id": 4,
          "name": "Thomas Paine",
          "last_updated_time": 1613423423,
        }
      ]
    },
    { "id": 4,
      "name": "Structural",
      "unread_conversations": 0
    },
    { "id": 6,
      "name": "Chit Chat",
      "unread_conversations": 1,
      "is_current":true
    },
    { "id": 2,
      "name": "Water Cooler Dev",
      "unread_conversations": 2
    },
    { "id": 9,
      "name": "Testing stuff",
      "unread_conversations": 0
    },
    { "id": 12,
      "name": "This folder is intentionally entirely too long",
      "unread_conversations": 0
    }
  ],
  conversations: [
    { "id": 3,
      "title": "Talk about stuff",
      "most_recent_message": 1334512345000,
      "unread_count": 14,
      "is_current": true,
      "participants": [
        { "id": 2,
          "name": "Paul Revere",
          "last_updated_time": 1235123423,
        },
        { "id": 4,
          "name": "Thomas Paine",
          "last_updated_time": 1613423423,
        }
      ]
    },
    { "id": 2,
      "title": "Meeting Notes",
      "most_recent_message": 1334512325000,
      "unread_count": 0,
      "participants": [
        { "id": 7,
          "name": "Ethan Allen",
          "last_updated_time": 1235123123,
        },
        { "id": 4,
          "name": "Thomas Paine",
          "last_updated_time": 1613423423,
        }
      ]
    },
    { "id": 5,
      "title": "What's for lunch?",
      "most_recent_message": 1334512545000,
      "unread_count": 5,
      "participants": [
        { "id": 1,
          "name": "George Washington",
          "last_updated_time": 1235123523,
        },
        { "id": 123,
          "name": "George Washington Carver",
          "last_updated_time": 1235123523,
        },
        { "id": 13213,
          "name": "George Foreman",
          "last_updated_time": 1235123523,
        },
        { "id": 13212323,
          "name": "Alexander Hamilton",
          "last_updated_time": 1235123523,
        },
        { "id": 15,
          "name": "John Adams",
          "last_updated_time": 1613423923,
        }
      ]
    },
    { "id": 12312,
      "title": "This convo title is intentionally entirely too long",
      "most_recent_message": 1334512545000,
      "unread_count": 0,
      "participants": [
        { "id": 1,
          "name": "George Washington",
          "last_updated_time": 1235123523,
        },
        { "id": 123,
          "name": "George Washington Carver",
          "last_updated_time": 1235123523,
        },
        { "id": 13213,
          "name": "George Foreman",
          "last_updated_time": 1235123523,
        },
        { "id": 13212323,
          "name": "Alexander Hamilton",
          "last_updated_time": 1235123523,
        },
        { "id": 15,
          "name": "John Adams",
          "last_updated_time": 1613423923,
        }
      ]
    },
    { "id": 101,
      "title": "Peanut Butters",
      "most_recent_message": 1334512545000,
      "unread_count": 22,
      "participants": [
        { "id": 1,
          "name": "George Washington",
          "last_updated_time": 1235123523,
        },
        { "id": 123,
          "name": "George Washington Carver",
          "last_updated_time": 1235123523,
        },
        { "id": 13213,
          "name": "George Foreman",
          "last_updated_time": 1235123523,
        },
        { "id": 13212323,
          "name": "Alexander Hamilton",
          "last_updated_time": 1235123523,
        },
        { "id": 15,
          "name": "John Adams",
          "last_updated_time": 1613423923,
        }
      ]
    },
    { "id": 122,
      "title": "Hosted Distribution Lists",
      "most_recent_message": 1334512545000,
      "unread_count": 0,
      "participants": [
        { "id": 1,
          "name": "George Washington",
          "last_updated_time": 1235123523,
        },
        { "id": 123,
          "name": "George Washington Carver",
          "last_updated_time": 1235123523,
        },
        { "id": 13213,
          "name": "George Foreman",
          "last_updated_time": 1235123523,
        },
        { "id": 13212323,
          "name": "Alexander Hamilton",
          "last_updated_time": 1235123523,
        },
        { "id": 15,
          "name": "John Adams",
          "last_updated_time": 1613423923,
        }
      ]
    },
    { "id": 1231214,
      "title": "Important things to keep in mind",
      "most_recent_message": 1334512545000,
      "unread_count": 2,
      "participants": [
        { "id": 1,
          "name": "George Washington",
          "last_updated_time": 1235123523,
        },
        { "id": 123,
          "name": "George Washington Carver",
          "last_updated_time": 1235123523,
        },
        { "id": 13213,
          "name": "George Foreman",
          "last_updated_time": 1235123523,
        },
        { "id": 13212323,
          "name": "Alexander Hamilton",
          "last_updated_time": 1235123523,
        },
        { "id": 15,
          "name": "John Adams",
          "last_updated_time": 1613423923,
        }
      ]
    },
    { "id": 12311,
      "title": "Javascript",
      "most_recent_message": 1333512545000,
      "unread_count": 1,
      "participants": [
        { "id": 1,
          "name": "George Washington",
          "last_updated_time": 1235123523,
        },
        { "id": 123,
          "name": "George Washington Carver",
          "last_updated_time": 1235123523,
        },
        { "id": 13213,
          "name": "George Foreman",
          "last_updated_time": 1235123523,
        },
        { "id": 13212323,
          "name": "Alexander Hamilton",
          "last_updated_time": 1235123523,
        },
        { "id": 15,
          "name": "John Adams",
          "last_updated_time": 1613423923,
        }
      ]
    }
  ],
  actions: [
    { type: "message",
      user: {
        name: "Ethan Allen",
        id: 2
      },
      timestamp: 1322512633004,
      id: 123,
      text: "This is a message"
    },
    { type: "message",
      user: {
        name: "Bonerz MaGee",
        id: 3
      },
      timestamp: 1363812634004,
      id: 124,
      text: "Yo Dawg, that was a message!"
    },
    { type: "update_users",
      user: {
        name: "Ethan Allen",
        id: 2
      },
      timestamp: 1363812635004,
      id: 456,
      added: [
        { name: "George Washington",
          id: 1
        },
        { name: "Benjamin Franklin",
          id: 5
        }
      ],
      removed: [
        { name: "John Adams",
          id: 4
        }
      ]
    },
    { type: "retitle",
      user: {
        name: "Ethan Allen",
        id: 2
      },
      id: 878,
      timestamp: 1363812637004,
      title: "Conversation Title"
    },
    { type: "deletion",
      user: {
        name: "David Bowie",
        id: 2
      },
      id: 788,
      timestamp: 1363802638110,
      msg_id: 789
    },
    { type: "message",
      user: {
        name: "Ground Control",
        id: 6
      },
      timestamp: 1363812638004,
      id: 785,
      text: "Ground Control to Major Tom, your circuit's dead is there something wrong?"
    },
    { type: "message",
      user: {
        name: "Major Tom",
        id: 9
      },
      timestamp: 1363812638104,
      id: 789,
      text: "I aaaammm floating 'round my tin can, faaaarrr above the moon.  Planet Earth is blue and there's nothing I can do..."
    },
    { type: "message",
      user: {
        name: "Ground Control",
        id: 6
      },
      timestamp: 1369681679894,
      id: 790,
      text: "Can you hear me Major Tom?  Can you hear me Major Tom?"
    },
  ],
  participants: [
    { name: "Sharon Jones",
      id: 1,
      most_recent_viewed: 1363812638003
    },
    { name: "The Dap Kings",
      id: 2,
      most_recent_viewed: 1363812638003
    }
  ],
  user: {
    "email": "george.washington@usa.gov",
    "full_name": "George Washington",
    "id": 1,
    "is_admin": true,
    "address_book": [
      { "name": "Paul Revere",
        "id": 3
      },
      { "name": "Ethan Allen",
        "id": 4
      },
      { "name": "Benjamin Franklin",
        "id": 6
      }
    ]
  },
  searchResults: [
    {
      "result_type": "action",
      "result_id": "266",
      "rank": "0.0909091",
      "headline": "<b>tuesday</b> + <b>thursday</b> week.   I know you two boners with real jobs might not be physically",
      "conversation_title": "Water Cooler Lobby - October 2013",
      "conversation_participants": [
        "Sean Kermes",
        "Ben Jones",
        "Nick Martin",
        "William Lubelski"
      ]
    },
    {
      "result_type": "action",
      "result_id": "130",
      "rank": "0.0536278",
      "headline": "<b>Tuesdays</b> and <b>Thursdays</b>, but I can still probably meet up at the library for a bit on <b>Tuesday</b>",
      "conversation_title": "Structural Lobby 13.0 ",
      "conversation_participants": [
        "Nick Martin",
        "Sean Kermes",
        "William Lubelski"
      ]
    },
    {
      "result_type": "conversation",
      "result_id": "76",
      "rank": "0.047619",
      "headline": "Hey <b>Tuesday</b> people",
      "conversation_title": "Hey Tuesday people",
      "conversation_participants": [
        "Sean Kermes",
        "William Lubelski",
        "Nick Martin"
      ]
    },
    {
      "result_type": "action",
      "result_id": "76",
      "rank": "0.047619",
      "headline": "<b>tuesday</b> and <b>thursday</b> just in case.  let me know if you cats can't or down",
      "conversation_title": "Structural Lobby 5.1",
      "conversation_participants": [
        "Nick Martin",
        "Sean Kermes",
        "William Lubelski"
      ]
    },
    {
      "result_type": "action",
      "result_id": "339",
      "rank": "0.047619",
      "headline": "\"<b>Tuesday</b> or <b>thursday</b> works for me.  \"",
      "conversation_title": "Lobby - December 2013",
      "conversation_participants": [
        "Nick Martin",
        "Ben Jones",
        "William Lubelski",
        "Sean Kermes"
      ]
    },
    {
      "result_type": "action",
      "result_id": "339",
      "rank": "0.0322581",
      "headline": "<b>Thursday</b>, but my <b>Tuesday</b> is open.  \\n\\nAlso, I seem to have injured my back",
      "conversation_title": "Lobby - December 2013",
      "conversation_participants": [
        "Ben Jones",
        "William Lubelski",
        "Sean Kermes",
        "Nick Martin"
      ]
    },
    {
      "result_type": "action",
      "result_id": "82",
      "rank": "0.0196078",
      "headline": "Look at https://www.dropbox.com/home/Structural/Notes/2013-03-14 for some scans of notes from <b>Tuesday</b>.  We'll talk again <b>Thursday</b>.\"",
      "conversation_title": "Notes from Tuesday",
      "conversation_participants": [
        "Sean Kermes",
        "Nick Martin",
        "William Lubelski"
      ]
    },
    {
      "result_type": "action",
      "result_id": "95",
      "rank": "0.0163934",
      "headline": "room at all for <b>Tuesday</b>.   We have Room 1 on <b>Thursday</b> from 5:30 - 7:00.  \"",
      "conversation_title": "Structural Lobby 7.0",
      "conversation_participants": [
        "William Lubelski",
        "Nick Martin",
        "Sean Kermes"
      ]
    },
    {
      "result_type": "action",
      "result_id": "266",
      "rank": "0.0123457",
      "headline": "lieu of the <b>Tuesday</b> event, I'm down to meet on <b>Thursday</b>.   anyone else interested?    \"",
      "conversation_title": "Water Cooler Lobby - October 2013",
      "conversation_participants": [
        "Nick Martin",
        "Sean Kermes",
        "Ben Jones",
        "William Lubelski"
      ]
    },
    {
      "result_type": "action",
      "result_id": "85",
      "rank": "0.010989",
      "headline": "reserved 6-8 in Room 2 for <b>Tuesday</b> and 5:30-7 in room 1 for <b>Thursday</b>.\"",
      "conversation_title": "Structural Lobby 6.0",
      "conversation_participants": [
        "Sean Kermes",
        "William Lubelski",
        "Nick Martin"
      ]
    },
    {
      "result_type": "action",
      "result_id": "339",
      "rank": "0.00990099",
      "headline": "<b>Tuesday</b> and Wednesday.  Then I'm back for good, so <b>Thursday</b> and this next weekend",
      "conversation_title": "Lobby - December 2013",
      "conversation_participants": [
        "William Lubelski",
        "Ben Jones",
        "Nick Martin",
        "Sean Kermes"
      ]
    },
    {
      "result_type": "action",
      "result_id": "266",
      "rank": "0.00497512",
      "headline": "\"WFPL for <b>tuesday</b> is already packed.  I'll probably still do some work and I",
      "conversation_title": "Water Cooler Lobby - October 2013",
      "conversation_participants": [
        "Nick Martin",
        "Sean Kermes",
        "Ben Jones",
        "William Lubelski"
      ]
    }
  ]
}

var name = '<%= @view_name %>';
var view;
switch(name) {
  case 'conversation':
    var model = new Structural.Models.Conversation(data.conversations[0]);
    view = new Structural.Views.Conversation({model: model});
    break;
  case 'conversation-list':
    var collection = new Structural.Collections.Conversations(data.conversations);
    view = new Structural.Views.Conversations({collection: collection});
    break;
  case 'conversation-container':
    var collection = new Structural.Collections.Conversations(data.conversations);
    view = new Structural.Views.ConversationContainer({conversations: collection});
    break;
  case 'new-conversation':
    view = new Structural.Views.NewConversation({
      addressBook: new Structural.Collections.Participants(data.user.address_book)
    });
    break;
  case 'folder':
    var model = new Structural.Models.Folder(data.folders[0]);
    view = new Structural.Views.Folder({model: model});
    break;
  case 'folder-list':
    var collection = new Structural.Collections.Folders(data.folders);
    view = new Structural.Views.Folders({collection: collection});
    break;
  case 'folder-container':
    var collection = new Structural.Collections.Folders(data.folders);
    view = new Structural.Views.FolderContainer({folders: collection});
    break;
  case 'folder-editor':
    view = new Structural.Views.FolderEditor({
      addressBook: new Structural.Collections.Participants(data.user.address_book),
      user: new Structural.Models.User(data.user)
    });
    view._folder = new Structural.Models.Folder(data.folders[0]);
    break;
  case 'title-editor':
    var model = new Structural.Models.Conversation(data.conversations[0]);
    view = new Structural.Views.TitleEditor({conversation: model});
    break;
  case 'participant-editor':
    var addressBook = new Structural.Collections.Participants(data.user.address_book);
    var participants = new Structural.Collections.Participants(data.participants);
    view = new Structural.Views.Participants({
      participants: participants,
      addressBook: addressBook,
      userId: 2
    });
    break;
  case 'update-folders':
    view = new Structural.Views.UpdateFoldersDialog();
    break;
  case 'action':
    var model = new Structural.Models.Action(data.actions[0]);
    view = new Structural.Views.Action({model: model});
    break;
  case 'action-list':
    var collection = new Structural.Collections.Actions(data.actions);
    view = new Structural.Views.Actions({collection: collection});
    break;
  case 'compose':
    var model = new Structural.Models.Conversation(data.conversations[0]);
    view = new Structural.Views.Compose({conversation: model});
    break;
  case 'action-container':
    var actions = new Structural.Collections.Actions(data.actions);
    var participants = new Structural.Collections.Participants(data.participants);
    var conversation = new Structural.Models.Conversation(data.conversations[0]);
    var addresses = new Structural.Collections.Participants(data.user.address_book);
    view = new Structural.Views.ActionContainer({
      actions: actions,
      participants: participants,
      conversation: conversation,
      addresses: addresses
    });
    break;
  case 'search':
    view = new Structural.Views.Search({
      query: 'tuesday thursday',
      results: new Structural.Collections.SearchResults(data.searchResults)
    });
    break;
  case 'structural-bar':
    var model = new Structural.Models.User(data.user);
    view = new Structural.Views.StructuralBar({model: model});
    break;
  case 'the-whole-app':
    $('.ux-testbed-container').detach();
    var bootstrap = _.clone(data);
    bootstrap.conversation = bootstrap.conversations[0];
    Structural.start(bootstrap);
    break;
  default:
    console.log('Unknown view name!!');
    break;
}

if (name != 'the-whole-app') {
  view.render();
  $('.ux-testbed-container').html(view.el);
}

<% end %>
